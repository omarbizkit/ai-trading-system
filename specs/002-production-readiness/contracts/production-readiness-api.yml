openapi: 3.0.3
info:
  title: AI Trading System - Production Readiness API
  version: 1.0.0
  description: |
    API contracts for production readiness monitoring, debugging, and health checking.
    These endpoints support TypeScript error resolution, API connectivity testing,
    database health monitoring, and deployment validation.

servers:
  - url: http://localhost:4321
    description: Development server
  - url: https://staging.ai-trading.bizkit.dev
    description: Staging environment
  - url: https://ai-trading.bizkit.dev
    description: Production environment

paths:
  # System Health and Monitoring
  /api/health:
    get:
      tags: [Health]
      summary: Application health check
      description: Comprehensive health check including database, APIs, and system status
      operationId: getSystemHealth
      responses:
        '200':
          description: System is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemHealth'
        '503':
          description: System is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemHealth'

  /api/health/database:
    get:
      tags: [Health]
      summary: Database connectivity check
      description: Test database connection and query performance
      operationId: getDatabaseHealth
      responses:
        '200':
          description: Database is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseHealth'
        '503':
          description: Database connectivity issues
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseHealth'

  /api/health/endpoints:
    get:
      tags: [Health]
      summary: API endpoints health check
      description: Test all API endpoints connectivity and response times
      operationId: getAPIHealth
      responses:
        '200':
          description: API endpoints status retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/APIHealthCheck'

  # TypeScript Error Management
  /api/debug/typescript-errors:
    get:
      tags: [Debug]
      summary: Get TypeScript compilation errors
      description: Retrieve current TypeScript errors categorized by severity
      operationId: getTypeScriptErrors
      parameters:
        - in: query
          name: category
          schema:
            $ref: '#/components/schemas/ErrorCategory'
          description: Filter by error category
        - in: query
          name: severity
          schema:
            $ref: '#/components/schemas/ErrorSeverity'
          description: Filter by error severity
        - in: query
          name: status
          schema:
            $ref: '#/components/schemas/ErrorStatus'
          description: Filter by resolution status
      responses:
        '200':
          description: TypeScript errors retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_errors:
                    type: integer
                    description: Total number of errors
                  errors_by_category:
                    type: object
                    additionalProperties:
                      type: integer
                  errors_by_severity:
                    type: object
                    additionalProperties:
                      type: integer
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/TypeScriptError'

    post:
      tags: [Debug]
      summary: Refresh TypeScript error analysis
      description: Re-run TypeScript compiler and update error tracking
      operationId: refreshTypeScriptErrors
      responses:
        '200':
          description: TypeScript analysis completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  analysis_completed_at:
                    type: string
                    format: date-time
                  total_errors_found:
                    type: integer
                  new_errors:
                    type: integer
                  resolved_errors:
                    type: integer

  /api/debug/typescript-errors/{errorId}:
    patch:
      tags: [Debug]
      summary: Update TypeScript error status
      description: Mark error as resolved or in progress
      operationId: updateTypeScriptError
      parameters:
        - in: path
          name: errorId
          required: true
          schema:
            type: string
          description: TypeScript error ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  $ref: '#/components/schemas/ErrorStatus'
                resolution_notes:
                  type: string
                  description: Notes on how the error was resolved
      responses:
        '200':
          description: Error status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypeScriptError'
        '404':
          description: Error not found

  # Build System Integration
  /api/debug/build-status:
    get:
      tags: [Debug]
      summary: Get build configuration and status
      description: Retrieve current build status and configuration
      operationId: getBuildStatus
      responses:
        '200':
          description: Build status retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildConfiguration'

    post:
      tags: [Debug]
      summary: Trigger new build
      description: Start a new build process and track its progress
      operationId: triggerBuild
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                environment:
                  $ref: '#/components/schemas/Environment'
                build_options:
                  type: object
                  properties:
                    clean_build:
                      type: boolean
                      description: Whether to clean before building
                    skip_tests:
                      type: boolean
                      description: Whether to skip test execution
      responses:
        '202':
          description: Build started
          content:
            application/json:
              schema:
                type: object
                properties:
                  build_id:
                    type: string
                  status:
                    $ref: '#/components/schemas/BuildStatus'
                  estimated_duration:
                    type: integer
                    description: Estimated build time in seconds

  # Deployment Management
  /api/debug/deployment-status:
    get:
      tags: [Deployment]
      summary: Get deployment status
      description: Retrieve current deployment status and configuration
      operationId: getDeploymentStatus
      responses:
        '200':
          description: Deployment status retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductionDeployment'

  /api/debug/environment-validation:
    post:
      tags: [Deployment]
      summary: Validate environment configuration
      description: Check environment variables and deployment readiness
      operationId: validateEnvironment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                environment:
                  $ref: '#/components/schemas/Environment'
                check_secrets:
                  type: boolean
                  description: Whether to validate secret values
      responses:
        '200':
          description: Environment validation completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_valid:
                    type: boolean
                  missing_variables:
                    type: array
                    items:
                      type: string
                  invalid_variables:
                    type: array
                    items:
                      type: string
                  environment_variables:
                    type: array
                    items:
                      $ref: '#/components/schemas/EnvironmentVariable'

  # Testing and Validation
  /api/debug/run-tests:
    post:
      tags: [Testing]
      summary: Execute test suite
      description: Run specified test suites and return results
      operationId: runTests
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                test_types:
                  type: array
                  items:
                    type: string
                    enum: [unit, integration, e2e, performance, contract]
                timeout:
                  type: integer
                  description: Test timeout in seconds
                  default: 300
      responses:
        '200':
          description: Tests completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  overall_status:
                    type: string
                    enum: [passed, failed, partial]
                  test_results:
                    type: array
                    items:
                      type: object
                      properties:
                        test_type:
                          type: string
                        status:
                          type: string
                          enum: [passed, failed, skipped]
                        duration:
                          type: integer
                        test_count:
                          type: integer
                        failure_count:
                          type: integer
                        error_message:
                          type: string

components:
  schemas:
    SystemHealth:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        timestamp:
          type: string
          format: date-time
        version:
          type: string
        uptime:
          type: integer
          description: Uptime in seconds
        components:
          type: object
          properties:
            database:
              $ref: '#/components/schemas/HealthStatus'
            api_endpoints:
              $ref: '#/components/schemas/HealthStatus'
            external_services:
              $ref: '#/components/schemas/HealthStatus'
            build_system:
              $ref: '#/components/schemas/HealthStatus'

    TypeScriptError:
      type: object
      required: [id, file_path, line_number, error_code, error_message, category, severity, status]
      properties:
        id:
          type: string
        file_path:
          type: string
        line_number:
          type: integer
          minimum: 1
        column_number:
          type: integer
          minimum: 1
        error_code:
          type: string
          pattern: '^ts\d+$'
        error_message:
          type: string
        category:
          $ref: '#/components/schemas/ErrorCategory'
        severity:
          $ref: '#/components/schemas/ErrorSeverity'
        status:
          $ref: '#/components/schemas/ErrorStatus'
        resolution_notes:
          type: string
        created_at:
          type: string
          format: date-time
        resolved_at:
          type: string
          format: date-time

    APIHealthCheck:
      type: object
      required: [id, endpoint_path, http_method, expected_status, status, last_checked, environment]
      properties:
        id:
          type: string
        endpoint_path:
          type: string
          pattern: '^/'
        http_method:
          $ref: '#/components/schemas/HTTPMethod'
        expected_status:
          type: integer
          minimum: 100
          maximum: 599
        actual_status:
          type: integer
          minimum: 100
          maximum: 599
        response_time:
          type: number
          minimum: 0
        error_message:
          type: string
        status:
          $ref: '#/components/schemas/HealthStatus'
        last_checked:
          type: string
          format: date-time
        consecutive_failures:
          type: integer
          minimum: 0
        environment:
          $ref: '#/components/schemas/Environment'

    DatabaseHealth:
      type: object
      required: [id, connection_name, host, database_name, connection_status, query_test_status, last_tested, environment]
      properties:
        id:
          type: string
        connection_name:
          type: string
        host:
          type: string
        database_name:
          type: string
        connection_status:
          $ref: '#/components/schemas/ConnectionStatus'
        query_test_status:
          $ref: '#/components/schemas/QueryStatus'
        average_query_time:
          type: number
          minimum: 0
        connection_pool_size:
          type: integer
          minimum: 0
        error_message:
          type: string
        last_tested:
          type: string
          format: date-time
        environment:
          $ref: '#/components/schemas/Environment'

    BuildConfiguration:
      type: object
      required: [id, environment, node_version, typescript_version, astro_version, build_command, build_status, error_count, warning_count, created_at]
      properties:
        id:
          type: string
        environment:
          $ref: '#/components/schemas/Environment'
        node_version:
          type: string
          pattern: '^\d+\.\d+\.\d+$'
        typescript_version:
          type: string
          pattern: '^\d+\.\d+\.\d+$'
        astro_version:
          type: string
          pattern: '^\d+\.\d+\.\d+$'
        build_command:
          type: string
        build_status:
          $ref: '#/components/schemas/BuildStatus'
        build_time:
          type: number
          minimum: 0
        bundle_size:
          type: integer
          minimum: 0
        error_count:
          type: integer
          minimum: 0
        warning_count:
          type: integer
          minimum: 0
        created_at:
          type: string
          format: date-time
        completed_at:
          type: string
          format: date-time
        error_log:
          type: string

    ProductionDeployment:
      type: object
      required: [id, version, commit_hash, deployment_status, deployment_platform, domain, rollback_available, created_at]
      properties:
        id:
          type: string
        version:
          type: string
          pattern: '^\d+\.\d+\.\d+$'
        commit_hash:
          type: string
          pattern: '^[a-f0-9]{7,40}$'
        deployment_status:
          $ref: '#/components/schemas/DeploymentStatus'
        deployment_platform:
          type: string
        domain:
          type: string
          format: hostname
        deployment_url:
          type: string
          format: uri
        health_check_url:
          type: string
          format: uri
        environment_variables:
          type: array
          items:
            $ref: '#/components/schemas/EnvironmentVariable'
        deployment_time:
          type: number
          minimum: 0
        rollback_available:
          type: boolean
        created_at:
          type: string
          format: date-time
        deployed_at:
          type: string
          format: date-time
        error_message:
          type: string

    EnvironmentVariable:
      type: object
      required: [key, is_set, is_sensitive, validation_status]
      properties:
        key:
          type: string
          pattern: '^[A-Z][A-Z0-9_]*$'
        is_set:
          type: boolean
        is_sensitive:
          type: boolean
        validation_status:
          $ref: '#/components/schemas/ValidationStatus'

    # Enums
    ErrorCategory:
      type: string
      enum: [type_mismatch, implicit_any, missing_types, property_violation, import_export, strict_mode]

    ErrorSeverity:
      type: string
      enum: [critical, high, medium, low]

    ErrorStatus:
      type: string
      enum: [identified, in_progress, resolved, deferred]

    HTTPMethod:
      type: string
      enum: [GET, POST, PUT, PATCH, DELETE]

    HealthStatus:
      type: string
      enum: [healthy, degraded, failed, unknown]

    ConnectionStatus:
      type: string
      enum: [connected, disconnected, timeout, error]

    QueryStatus:
      type: string
      enum: [success, slow, failed, not_tested]

    BuildStatus:
      type: string
      enum: [pending, building, success, failed, cancelled]

    DeploymentStatus:
      type: string
      enum: [queued, deploying, success, failed, rolled_back]

    ValidationStatus:
      type: string
      enum: [valid, invalid, not_validated]

    Environment:
      type: string
      enum: [development, staging, production]

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []

tags:
  - name: Health
    description: System health and monitoring endpoints
  - name: Debug
    description: Development and debugging utilities
  - name: Deployment
    description: Deployment management and validation
  - name: Testing
    description: Test execution and validation