# AI Trading System - Docker Compose Configuration
# For local development and testing

version: '3.8'

services:
  # Main application
  ai-trading-app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "4321:4321"
    environment:
      - NODE_ENV=development
      - PORT=4321
      - HOST=0.0.0.0
      # Supabase configuration (use .env.local values)
      - PUBLIC_SUPABASE_URL=${PUBLIC_SUPABASE_URL}
      - PUBLIC_SUPABASE_ANON_KEY=${PUBLIC_SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      # CoinGecko API
      - COINGECKO_API_KEY=${COINGECKO_API_KEY:-}
      # AI/ML Model configuration
      - MODEL_URL=${MODEL_URL:-}
      - MODEL_VERSION=${MODEL_VERSION:-1.0.0}
    volumes:
      - ./src:/app/src
      - ./public:/app/public
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - ai-trading-network

  # Redis for caching (development only)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - ai-trading-network

  # PostgreSQL for local development (optional)
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=ai_trading_dev
      - POSTGRES_USER=ai_trading
      - POSTGRES_PASSWORD=dev_password_change_in_production
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - ai-trading-network

  # Nginx reverse proxy (production-like setup)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - ai-trading-app
    restart: unless-stopped
    networks:
      - ai-trading-network

volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local

networks:
  ai-trading-network:
    driver: bridge

# Health checks and monitoring
x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s

# Override for production
# Use: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up
---
# Production overrides
version: '3.8'

services:
  ai-trading-app:
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      <<: *healthcheck-defaults

  redis:
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'

  postgres:
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'