---
/**
 * T054: TradeLog component for transaction history
 * Advanced trade history display with filtering, search, and performance metrics
 */

export interface Props {
  runId?: string;
  limit?: number;
  showFilters?: boolean;
  showPagination?: boolean;
  compact?: boolean;
  className?: string;
}

const { 
  runId,
  limit = 50,
  showFilters = true,
  showPagination = true,
  compact = false,
  className = ''
} = Astro.props;
---

<div class={`trade-log-container ${className}`}>
  <!-- Header -->
  <div class="trade-log-header flex items-center justify-between p-4 border-b border-neon-cyan/20">
    <div class="header-title">
      <h3 class="text-lg font-orbitron font-bold text-neon-cyan glow-text">
        Trade History
      </h3>
      <p class="text-sm text-text-muted mt-1" id="trade-count">
        Loading trades...
      </p>
    </div>
    
    {showFilters && (
      <div class="header-controls flex items-center space-x-2">
        <!-- Trade Type Filter -->
        <select 
          id="trade-type-filter"
          class="bg-dark-surface border border-neon-cyan/30 text-neon-cyan rounded-lg px-3 py-1 text-sm focus:border-neon-cyan focus:outline-none"
        >
          <option value="all">All Trades</option>
          <option value="buy">Buy Orders</option>
          <option value="sell">Sell Orders</option>
        </select>
        
        <!-- Date Range Filter -->
        <input 
          type="date" 
          id="date-from-filter"
          class="bg-dark-surface border border-neon-cyan/30 text-neon-cyan rounded-lg px-3 py-1 text-sm focus:border-neon-cyan focus:outline-none"
          placeholder="From Date"
        />
        
        <!-- Refresh Button -->
        <button 
          id="refresh-trades"
          class="p-2 text-neon-cyan hover:text-neon-pink border border-neon-cyan/30 rounded-lg hover:border-neon-pink/30 transition-colors duration-300"
          title="Refresh Trades"
        >
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
          </svg>
        </button>
      </div>
    )}
  </div>
  
  <!-- Trades List -->
  <div class="trade-log-content">
    <!-- Loading State -->
    <div id="trades-loading" class="p-8 text-center">
      <div class="animate-spin inline-block w-8 h-8 border-4 border-neon-cyan border-t-transparent rounded-full mb-4"></div>
      <p class="text-neon-cyan font-rajdhani">Loading trade history...</p>
    </div>
    
    <!-- Empty State -->
    <div id="trades-empty" class="hidden p-8 text-center">
      <div class="text-6xl mb-4">ðŸ“Š</div>
      <p class="text-text-muted font-rajdhani text-lg">No trades found</p>
      <p class="text-text-muted text-sm mt-2">Start trading to see your transaction history here.</p>
    </div>
    
    <!-- Trades Table -->
    <div id="trades-table-container" class="hidden overflow-x-auto">
      {!compact ? (
        <!-- Full Table View -->
        <table class="w-full text-sm" id="trades-table">
          <thead class="bg-dark-surface/50 border-b border-neon-cyan/20">
            <tr>
              <th class="px-4 py-3 text-left text-neon-cyan font-medium">Time</th>
              <th class="px-4 py-3 text-left text-neon-cyan font-medium">Type</th>
              <th class="px-4 py-3 text-left text-neon-cyan font-medium">Asset</th>
              <th class="px-4 py-3 text-right text-neon-cyan font-medium">Quantity</th>
              <th class="px-4 py-3 text-right text-neon-cyan font-medium">Price</th>
              <th class="px-4 py-3 text-right text-neon-cyan font-medium">Total Value</th>
              <th class="px-4 py-3 text-right text-neon-cyan font-medium">Fee</th>
              <th class="px-4 py-3 text-right text-neon-cyan font-medium">P&L</th>
              <th class="px-4 py-3 text-left text-neon-cyan font-medium">Reason</th>
            </tr>
          </thead>
          <tbody id="trades-tbody" class="divide-y divide-neon-cyan/10">
            <!-- Dynamic content -->
          </tbody>
        </table>
      ) : (
        <!-- Compact Card View -->
        <div id="trades-cards" class="space-y-2 p-4">
          <!-- Dynamic content -->
        </div>
      )}
    </div>
    
    {showPagination && (
      <!-- Pagination -->
      <div class="pagination-container p-4 border-t border-neon-cyan/20 flex items-center justify-between" id="pagination" style="display: none;">
        <div class="text-sm text-text-muted" id="pagination-info">
          Showing 0 of 0 trades
        </div>
        
        <div class="flex items-center space-x-2">
          <button 
            id="prev-page"
            class="px-3 py-1 text-neon-cyan border border-neon-cyan/30 rounded hover:bg-neon-cyan/10 disabled:opacity-50 disabled:cursor-not-allowed"
            disabled
          >
            Previous
          </button>
          
          <span class="text-text-muted" id="page-info">Page 1 of 1</span>
          
          <button 
            id="next-page"
            class="px-3 py-1 text-neon-cyan border border-neon-cyan/30 rounded hover:bg-neon-cyan/10 disabled:opacity-50 disabled:cursor-not-allowed"
            disabled
          >
            Next
          </button>
        </div>
      </div>
    )}
  </div>
  
  <!-- Trade Details Modal -->
  <div id="trade-details-modal" class="fixed inset-0 bg-black/50 backdrop-blur-sm hidden z-50" style="display: none;">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-dark-surface border border-neon-cyan/30 rounded-lg max-w-md w-full max-h-[80vh] overflow-y-auto">
        <div class="p-4 border-b border-neon-cyan/20 flex items-center justify-between">
          <h4 class="text-lg font-orbitron font-bold text-neon-cyan">Trade Details</h4>
          <button id="close-modal" class="text-text-muted hover:text-neon-pink">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        <div id="modal-content" class="p-4">
          <!-- Dynamic content -->
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  let trades = [];
  let filteredTrades = [];
  let currentPage = 1;
  let itemsPerPage = 20;
  let totalPages = 1;
  let currentRunId = null;
  let isCompactView = false;
  
  document.addEventListener('DOMContentLoaded', function() {
    // Get component configuration
    const container = document.querySelector('.trade-log-container');
    if (container) {
      const runIdAttr = container.closest('[data-run-id]');
      currentRunId = runIdAttr?.dataset.runId || null;
      isCompactView = container.classList.contains('compact');
    }
    
    // Initialize trade log
    initializeTradeLog();
    
    // Setup event listeners
    setupEventListeners();
  });
  
  async function initializeTradeLog() {
    try {
      await loadTrades();
    } catch (error) {
      console.error('Failed to initialize trade log:', error);
      showError('Failed to load trade history');
    }
  }
  
  async function loadTrades() {
    const loadingElement = document.getElementById('trades-loading');
    const emptyElement = document.getElementById('trades-empty');
    const tableContainer = document.getElementById('trades-table-container');
    
    if (loadingElement) loadingElement.classList.remove('hidden');
    if (emptyElement) emptyElement.classList.add('hidden');
    if (tableContainer) tableContainer.classList.add('hidden');
    
    try {
      let url = '/api/runs/';
      if (currentRunId) {
        url += `${currentRunId}/trades`;
      } else {
        // Get all user trades (would need different endpoint)
        throw new Error('User-wide trade history not implemented yet');
      }
      
      const response = await fetch(url + '?include_summary=true&include_performance=true');
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const data = await response.json();
      
      if (data.success) {
        trades = data.data || [];
        filteredTrades = [...trades];
        
        updateTradeCount();
        
        if (trades.length === 0) {
          showEmptyState();
        } else {
          renderTrades();
          setupPagination();
        }
      } else {
        throw new Error(data.message || 'Failed to load trades');
      }
      
    } catch (error) {
      console.error('Failed to load trades:', error);
      showError(error.message);
    } finally {
      if (loadingElement) loadingElement.classList.add('hidden');
    }
  }
  
  function renderTrades() {
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const pageTrades = filteredTrades.slice(startIndex, endIndex);
    
    if (isCompactView) {
      renderCompactTrades(pageTrades);
    } else {
      renderTableTrades(pageTrades);
    }
    
    const tableContainer = document.getElementById('trades-table-container');
    if (tableContainer) {
      tableContainer.classList.remove('hidden');
    }
  }
  
  function renderTableTrades(tradesToRender) {
    const tbody = document.getElementById('trades-tbody');
    if (!tbody) return;
    
    tbody.innerHTML = tradesToRender.map(trade => `
      <tr class="hover:bg-neon-cyan/5 transition-colors cursor-pointer" onclick="showTradeDetails('${trade.id}')">
        <td class="px-4 py-3 text-text-secondary font-mono">
          ${formatDate(trade.execution_time)}
        </td>
        <td class="px-4 py-3">
          <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
            trade.trade_type === 'buy' 
              ? 'bg-neon-green/20 text-neon-green border border-neon-green/30' 
              : 'bg-neon-pink/20 text-neon-pink border border-neon-pink/30'
          }">
            ${trade.trade_type === 'buy' ? 'â†‘ BUY' : 'â†“ SELL'}
          </span>
        </td>
        <td class="px-4 py-3 text-white font-medium">
          ${trade.coin_symbol}
        </td>
        <td class="px-4 py-3 text-right text-white font-mono">
          ${formatNumber(trade.quantity, 6)}
        </td>
        <td class="px-4 py-3 text-right text-white font-mono">
          $${formatNumber(trade.price, 2)}
        </td>
        <td class="px-4 py-3 text-right text-white font-mono">
          $${formatNumber(trade.total_value, 2)}
        </td>
        <td class="px-4 py-3 text-right text-neon-purple font-mono">
          $${formatNumber(trade.fee, 2)}
        </td>
        <td class="px-4 py-3 text-right font-mono">
          ${trade.profit_loss !== null 
            ? `<span class="${trade.profit_loss >= 0 ? 'text-neon-green' : 'text-neon-pink'}">
                ${trade.profit_loss >= 0 ? '+' : ''}$${formatNumber(Math.abs(trade.profit_loss), 2)}
               </span>`
            : '<span class="text-text-muted">-</span>'
          }
        </td>
        <td class="px-4 py-3">
          <span class="inline-flex items-center px-2 py-1 rounded-full text-xs bg-dark-surface text-text-secondary border border-neon-cyan/20">
            ${formatTradeReason(trade.trade_reason)}
          </span>
        </td>
      </tr>
    `).join('');
  }
  
  function renderCompactTrades(tradesToRender) {
    const container = document.getElementById('trades-cards');
    if (!container) return;
    
    container.innerHTML = tradesToRender.map(trade => `
      <div class="trade-card bg-dark-surface/50 border border-neon-cyan/20 rounded-lg p-3 hover:border-neon-cyan/40 transition-colors cursor-pointer" onclick="showTradeDetails('${trade.id}')">
        <div class="flex items-center justify-between mb-2">
          <div class="flex items-center space-x-2">
            <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
              trade.trade_type === 'buy' 
                ? 'bg-neon-green/20 text-neon-green border border-neon-green/30' 
                : 'bg-neon-pink/20 text-neon-pink border border-neon-pink/30'
            }">
              ${trade.trade_type === 'buy' ? 'â†‘ BUY' : 'â†“ SELL'} ${trade.coin_symbol}
            </span>
            <span class="text-xs text-text-muted font-mono">
              ${formatDate(trade.execution_time, true)}
            </span>
          </div>
          
          ${trade.profit_loss !== null 
            ? `<span class="text-sm font-mono ${trade.profit_loss >= 0 ? 'text-neon-green' : 'text-neon-pink'}">
                ${trade.profit_loss >= 0 ? '+' : ''}$${formatNumber(Math.abs(trade.profit_loss), 2)}
               </span>`
            : ''
          }
        </div>
        
        <div class="grid grid-cols-3 gap-2 text-xs">
          <div>
            <span class="text-text-muted block">Quantity</span>
            <span class="text-white font-mono">${formatNumber(trade.quantity, 4)}</span>
          </div>
          <div>
            <span class="text-text-muted block">Price</span>
            <span class="text-white font-mono">$${formatNumber(trade.price, 2)}</span>
          </div>
          <div>
            <span class="text-text-muted block">Total</span>
            <span class="text-white font-mono">$${formatNumber(trade.total_value, 2)}</span>
          </div>
        </div>
      </div>
    `).join('');
  }
  
  function setupEventListeners() {
    // Filter listeners
    const typeFilter = document.getElementById('trade-type-filter');
    const dateFromFilter = document.getElementById('date-from-filter');
    const refreshButton = document.getElementById('refresh-trades');
    
    if (typeFilter) {
      typeFilter.addEventListener('change', applyFilters);
    }
    
    if (dateFromFilter) {
      dateFromFilter.addEventListener('change', applyFilters);
    }
    
    if (refreshButton) {
      refreshButton.addEventListener('click', () => {
        refreshButton.classList.add('animate-spin');
        loadTrades().finally(() => {
          refreshButton.classList.remove('animate-spin');
        });
      });
    }
    
    // Pagination listeners
    const prevButton = document.getElementById('prev-page');
    const nextButton = document.getElementById('next-page');
    
    if (prevButton) {
      prevButton.addEventListener('click', () => {
        if (currentPage > 1) {
          currentPage--;
          renderTrades();
          updatePaginationInfo();
        }
      });
    }
    
    if (nextButton) {
      nextButton.addEventListener('click', () => {
        if (currentPage < totalPages) {
          currentPage++;
          renderTrades();
          updatePaginationInfo();
        }
      });
    }
    
    // Modal listeners
    const closeModal = document.getElementById('close-modal');
    const modal = document.getElementById('trade-details-modal');
    
    if (closeModal && modal) {
      closeModal.addEventListener('click', () => {
        modal.style.display = 'none';
      });
      
      modal.addEventListener('click', (e) => {
        if (e.target === modal) {
          modal.style.display = 'none';
        }
      });
    }
  }
  
  function applyFilters() {
    const typeFilter = document.getElementById('trade-type-filter')?.value || 'all';
    const dateFromFilter = document.getElementById('date-from-filter')?.value;
    
    filteredTrades = trades.filter(trade => {
      // Type filter
      if (typeFilter !== 'all' && trade.trade_type !== typeFilter) {
        return false;
      }
      
      // Date filter
      if (dateFromFilter) {
        const tradeDate = new Date(trade.execution_time).toISOString().split('T')[0];
        if (tradeDate < dateFromFilter) {
          return false;
        }
      }
      
      return true;
    });
    
    currentPage = 1;
    setupPagination();
    renderTrades();
    updateTradeCount();
  }
  
  function setupPagination() {
    totalPages = Math.ceil(filteredTrades.length / itemsPerPage);
    updatePaginationInfo();
    
    const pagination = document.getElementById('pagination');
    if (pagination && filteredTrades.length > itemsPerPage) {
      pagination.style.display = 'flex';
    } else if (pagination) {
      pagination.style.display = 'none';
    }
  }
  
  function updatePaginationInfo() {
    const pageInfo = document.getElementById('page-info');
    const paginationInfo = document.getElementById('pagination-info');
    const prevButton = document.getElementById('prev-page');
    const nextButton = document.getElementById('next-page');
    
    if (pageInfo) {
      pageInfo.textContent = `Page ${currentPage} of ${totalPages}`;
    }
    
    if (paginationInfo) {
      const startIndex = (currentPage - 1) * itemsPerPage + 1;
      const endIndex = Math.min(currentPage * itemsPerPage, filteredTrades.length);
      paginationInfo.textContent = `Showing ${startIndex}-${endIndex} of ${filteredTrades.length} trades`;
    }
    
    if (prevButton) {
      prevButton.disabled = currentPage <= 1;
    }
    
    if (nextButton) {
      nextButton.disabled = currentPage >= totalPages;
    }
  }
  
  function updateTradeCount() {
    const tradeCount = document.getElementById('trade-count');
    if (tradeCount) {
      tradeCount.textContent = `${filteredTrades.length} ${filteredTrades.length === 1 ? 'trade' : 'trades'} found`;
    }
  }
  
  function showEmptyState() {
    const emptyElement = document.getElementById('trades-empty');
    if (emptyElement) {
      emptyElement.classList.remove('hidden');
    }
  }
  
  function showError(message) {
    const container = document.querySelector('.trade-log-content');
    if (container) {
      container.innerHTML = `
        <div class="p-8 text-center">
          <div class="text-neon-pink text-4xl mb-4">âš </div>
          <p class="text-neon-pink font-rajdhani">${message}</p>
          <button class="mt-4 px-4 py-2 bg-neon-cyan text-dark-bg rounded-lg hover:bg-neon-pink transition-colors" onclick="location.reload()">
            Retry
          </button>
        </div>
      `;
    }
  }
  
  function showTradeDetails(tradeId) {
    const trade = trades.find(t => t.id === tradeId);
    if (!trade) return;
    
    const modal = document.getElementById('trade-details-modal');
    const modalContent = document.getElementById('modal-content');
    
    if (!modal || !modalContent) return;
    
    modalContent.innerHTML = `
      <div class="space-y-4">
        <div class="grid grid-cols-2 gap-4 text-sm">
          <div>
            <span class="text-text-muted block mb-1">Trade ID</span>
            <span class="text-neon-cyan font-mono text-xs">${trade.id}</span>
          </div>
          <div>
            <span class="text-text-muted block mb-1">Execution Time</span>
            <span class="text-white font-mono">${formatDate(trade.execution_time)}</span>
          </div>
          <div>
            <span class="text-text-muted block mb-1">Type</span>
            <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
              trade.trade_type === 'buy' 
                ? 'bg-neon-green/20 text-neon-green border border-neon-green/30' 
                : 'bg-neon-pink/20 text-neon-pink border border-neon-pink/30'
            }">
              ${trade.trade_type === 'buy' ? 'â†‘ BUY' : 'â†“ SELL'}
            </span>
          </div>
          <div>
            <span class="text-text-muted block mb-1">Asset</span>
            <span class="text-neon-cyan font-bold">${trade.coin_symbol}</span>
          </div>
          <div>
            <span class="text-text-muted block mb-1">Quantity</span>
            <span class="text-white font-mono">${formatNumber(trade.quantity, 6)}</span>
          </div>
          <div>
            <span class="text-text-muted block mb-1">Price</span>
            <span class="text-white font-mono">$${formatNumber(trade.price, 2)}</span>
          </div>
          <div>
            <span class="text-text-muted block mb-1">Total Value</span>
            <span class="text-white font-mono">$${formatNumber(trade.total_value, 2)}</span>
          </div>
          <div>
            <span class="text-text-muted block mb-1">Fee</span>
            <span class="text-neon-purple font-mono">$${formatNumber(trade.fee, 2)}</span>
          </div>
          ${trade.profit_loss !== null ? `
            <div>
              <span class="text-text-muted block mb-1">P&L</span>
              <span class="font-mono ${trade.profit_loss >= 0 ? 'text-neon-green' : 'text-neon-pink'}">
                ${trade.profit_loss >= 0 ? '+' : ''}$${formatNumber(Math.abs(trade.profit_loss), 2)}
              </span>
            </div>
          ` : ''}
          <div>
            <span class="text-text-muted block mb-1">Portfolio Before</span>
            <span class="text-white font-mono">$${formatNumber(trade.portfolio_value_before, 2)}</span>
          </div>
          <div>
            <span class="text-text-muted block mb-1">Portfolio After</span>
            <span class="text-white font-mono">$${formatNumber(trade.portfolio_value_after, 2)}</span>
          </div>
          <div>
            <span class="text-text-muted block mb-1">Reason</span>
            <span class="inline-flex items-center px-2 py-1 rounded-full text-xs bg-dark-surface text-text-secondary border border-neon-cyan/20">
              ${formatTradeReason(trade.trade_reason)}
            </span>
          </div>
          ${trade.ai_confidence ? `
            <div>
              <span class="text-text-muted block mb-1">AI Confidence</span>
              <span class="text-neon-purple font-mono">${(trade.ai_confidence * 100).toFixed(1)}%</span>
            </div>
          ` : ''}
        </div>
      </div>
    `;
    
    modal.style.display = 'flex';
  }
  
  // Utility functions
  function formatDate(dateString, compact = false) {
    const date = new Date(dateString);
    if (compact) {
      return date.toLocaleString('en-US', {
        month: 'short',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    }
    return date.toLocaleString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });
  }
  
  function formatNumber(value, decimals) {
    if (value === null || value === undefined) return '0.00';
    return parseFloat(value).toLocaleString('en-US', {
      minimumFractionDigits: decimals,
      maximumFractionDigits: decimals
    });
  }
  
  function formatTradeReason(reason) {
    const reasonMap = {
      'ai_signal': 'AI Signal',
      'manual': 'Manual',
      'stop_loss': 'Stop Loss',
      'take_profit': 'Take Profit',
      'risk_management': 'Risk Mgmt'
    };
    return reasonMap[reason] || reason;
  }
  
  // Export functions for external use
  window.TradeLog = {
    refresh: loadTrades,
    setRunId: (runId) => {
      currentRunId = runId;
      loadTrades();
    }
  };
</script>

<style>
  .trade-log-container {
    @apply bg-dark-surface/80 backdrop-blur-sm rounded-lg border border-neon-cyan/30 shadow-xl;
  }
  
  .trade-card:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0, 255, 255, 0.1);
  }
  
  /* Table styling */
  #trades-table {
    border-collapse: separate;
    border-spacing: 0;
  }
  
  #trades-table thead th {
    position: sticky;
    top: 0;
    background: rgba(26, 26, 46, 0.9);
    backdrop-filter: blur(10px);
  }
  
  #trades-table tbody tr:hover {
    background: rgba(0, 255, 255, 0.05);
    transform: translateX(2px);
  }
  
  /* Modal styling */
  #trade-details-modal {
    backdrop-filter: blur(10px);
  }
  
  /* Scrollbar styling for modal */
  #trade-details-modal ::-webkit-scrollbar {
    width: 6px;
  }
  
  #trade-details-modal ::-webkit-scrollbar-track {
    background: var(--dark-bg);
  }
  
  #trade-details-modal ::-webkit-scrollbar-thumb {
    background: linear-gradient(180deg, var(--neon-cyan), var(--neon-purple));
    border-radius: 3px;
  }
  
  /* Responsive adjustments */
  @media (max-width: 768px) {
    .trade-log-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 1rem;
    }
    
    .header-controls {
      flex-wrap: wrap;
      gap: 0.5rem;
    }
    
    #trades-table {
      font-size: 0.75rem;
    }
    
    #trades-table th,
    #trades-table td {
      padding: 0.5rem 0.25rem;
    }
  }
</style>